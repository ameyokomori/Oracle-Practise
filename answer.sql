-- INFS2200 Assignment, Semester 2 - 2017

-- DOG_ID: 8353

--########################################################################################

-- Task 1: Constraints

-- a)
    SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS
	WHERE TABLE_NAME IN ('DOG_BREEDS','DOGS','CUSTOMERS','STORES','SERVICE_HISTORY','SERVICES_HISTORY_DETAIL','SERVICES');

-- b)
    ALTER TABLE CUSTOMERS ADD CONSTRAINT PK_CUSTOMERS
	PRIMARY KEY (C_ID);

    ALTER TABLE DOGS ADD CONSTRAINT FK_C_ID
	FOREIGN KEY (C_ID)
	REFERENCES CUSTOMERS (C_ID);

    ALTER TABLE CUSTOMERS ADD CONSTRAINT NN_DOB
	CHECK (DOB IS NOT NULL);

    ALTER TABLE SERVICE_HISTORY ADD CONSTRAINT CK_FINISHED
	CHECK (FINISHED IN ('T','F'));

    ALTER TABLE CUSTOMERS ADD CONSTRAINT CK_DOB
	CHECK (DOB <= TO_DATE('1998-12-31', 'YYYY-MM-DD'));

    ALTER TABLE SERVICE_HISTORY_DETAIL ADD CONSTRAINT CK_START_TIME_END_TIME
	CHECK (START_TIME <= END_TIME);

    ALTER TABLE SERVICE_HISTORY_DETAIL ADD CONSTRAINT CK_SERVICE_DATE
	CHECK (END_TIME < TO_DATE('2018-01-01', 'YYYY-MM-DD'));

--########################################################################################

-- Task 2: Triggers

-- a)
    CREATE SEQUENCE "SEQ_CUSTOMER" MINVALUE 10000 MAXVALUE 999999999990
    INCREMENT BY 1 START WITH 10000;

    CREATE OR REPLACE TRIGGER "TR_CUSTOMER_ID"
    BEFORE INSERT ON "CUSTOMERS"
    FOR EACH ROW
    BEGIN
        SELECT "SEQ_CUSTOMER".NEXTVAL INTO :NEW.C_ID FROM DUAL;
    END;
    /
-- b)
    CREATE SEQUENCE "SEQ_SERVICE_HISTORY" MINVALUE 125000 MAXVALUE 999999999990
    INCREMENT BY 1 START WITH 125000;

    CREATE OR REPLACE TRIGGER "TR_SERVICE_ID"
    BEFORE INSERT ON "SERVICE_HISTORY"
    FOR EACH ROW
    BEGIN
    SELECT "SEQ_SERVICE_HISTORY".NEXTVAL INTO :NEW.SERVICE_ID FROM DUAL;
    END;
    /
-- c)
    CREATE OR REPLACE TRIGGER "TR_SERVICE_HISTORY_MESSAGE"
        BEFORE INSERT OR UPDATE ON "SERVICE_HISTORY"
        FOR EACH ROW
    DECLARE
        CFNAME VARCHAR2(50) := 'NULL';
        CLNAME VARCHAR2(50) := 'NULL';
        DNAME VARCHAR2(50) := 'NULL';
        DBREED VARCHAR2(50) := 'NULL';
        SAREA VARCHAR2(50) := 'NULL';
    BEGIN
        IF (:NEW.FINISHED = 'T') THEN
            SELECT F_NAME, L_NAME, DOG_NAME, DOG_BREED, STORE_AREA INTO CFNAME, CLNAME, DNAME, DBREED, SAREA
            FROM CUSTOMERS, DOGS, STORES
            WHERE :NEW.DOG_ID = DOGS.DOG_ID AND
                :NEW.STORE_ID = STORES.STORE_ID AND
                DOGS.C_ID = CUSTOMERS.C_ID;
            :NEW.MESSAGE := 'Hi '||CFNAME||' '||CLNAME||', your dog '||DNAME||' of breed: '||DBREED||' is ready for pick-up at '||SAREA||'.';
        ELSE
            SELECT F_NAME, L_NAME, DOG_NAME, DOG_BREED INTO CFNAME, CLNAME, DNAME, DBREED
            FROM CUSTOMERS, DOGS
            WHERE :NEW.DOG_ID = DOGS.DOG_ID AND
                DOGS.C_ID = CUSTOMERS.C_ID;
            :NEW.MESSAGE := 'Hi '||CFNAME||' '||CLNAME||', your dog '||DNAME||' of breed: '||DBREED||' is not ready to be picked up yet.';
        END IF;
    END;
    /
-- d)
    INSERT INTO CUSTOMERS (F_NAME, L_NAME, DOB)
    VALUES ('Luke', 'Cheung', '08-OCT-1996');

    INSERT INTO SERVICE_HISTORY (DOG_ID, STORE_ID, FINISHED)
    VALUES (1234, 30, 'F');

--########################################################################################

-- Task 3: Views

-- a)
    CREATE VIEW V_DOG_BREED_STATISTICS AS
    SELECT SUM(PRICE) AS TOTAL, AVG(PRICE) AS MEAN, STDDEV(PRICE) AS STANDARD_DEVIATION, DOG_BREED
    FROM DOGS, SERVICE_HISTORY, SERVICE_HISTORY_DETAIL, SERVICES
    WHERE DOGS.DOG_ID = SERVICE_HISTORY.DOG_ID AND
        SERVICE_HISTORY.SERVICE_ID = SERVICE_HISTORY_DETAIL.SERVICE_ID AND
        SERVICE_HISTORY_DETAIL.SERVICE_NAME = SERVICES.SERVICE_NAME
    GROUP BY DOG_BREED;
-- b)
    CREATE MATERIALIZED VIEW MV_DOG_BREED_STATISTICS
    BUILD IMMEDIATE
    AS
    SELECT SUM(PRICE) AS TOTAL, AVG(PRICE) AS MEAN, STDDEV(PRICE) AS STANDARD_DEVIATION, DOG_BREED
    FROM DOGS, SERVICE_HISTORY, SERVICE_HISTORY_DETAIL, SERVICES
    WHERE DOGS.DOG_ID = SERVICE_HISTORY.DOG_ID AND
        SERVICE_HISTORY.SERVICE_ID = SERVICE_HISTORY_DETAIL.SERVICE_ID AND
        SERVICE_HISTORY_DETAIL.SERVICE_NAME = SERVICES.SERVICE_NAME
    GROUP BY DOG_BREED;

--########################################################################################

-- Task 4: Function Based Indexes

-- a)
	SELECT SERVICE_HISTORY_DETAIL.SERVICE_NAME, T_LT.lONGEST_TIME, DOGS.DOG_ID, DOGS.DOG_NAME, STORES.STORE_AREA
	FROM DOGS, STORES, SERVICE_HISTORY_DETAIL, SERVICE_HISTORY, (
		SELECT MAX(END_TIME - START_TIME) AS lONGEST_TIME
		FROM SERVICE_HISTORY_DETAIL
		WHERE SERVICE_HISTORY_DETAIL.SERVICE_NAME = 'Dental Checkup'
		GROUP BY SERVICE_HISTORY_DETAIL.SERVICE_NAME) T_LT
	WHERE (END_TIME - START_TIME) = T_LT.lONGEST_TIME AND
		SERVICE_HISTORY.SERVICE_ID = SERVICE_HISTORY_DETAIL.SERVICE_ID AND
		STORES.STORE_ID = SERVICE_HISTORY.STORE_ID AND
		DOGS.DOG_ID = SERVICE_HISTORY.DOG_ID AND
		SERVICE_HISTORY_DETAIL.SERVICE_NAME = 'Dental Checkup';

-- b)
    CREATE INDEX IDX_SERVICE_TIME ON SERVICE_HISTORY_DETAIL(END_TIME - START_TIME);



--########################################################################################

-- Task 5: Bitmap Indexing

-- a)
    SELECT SERVICE_NAME, COUNT(*)
	FROM SERVICE_HISTORY_DETAIL
	GROUP BY SERVICE_NAME;

-- b)
    CREATE BITMAP INDEX BIDX_SERVICE ON SERVICE_HISTORY_DETAIL(SERVICE_NAME);

--########################################################################################

-- Task 6: Execution Plan & Analysis

-- b)
    SELECT TABLE_NAME, COLUMN_NAME, INDEX_NAME
	FROM USER_IND_COLUMNS
	WHERE TABLE_NAME IN ('STORES', 'DOGS');

-- c)
    SELECT SERVICE_ID
	FROM SERVICE_HISTORY
	WHERE DOG_ID = '8353';

-- d)
    ALTER TABLE SERVICE_HISTORY DROP CONSTRAINT FK_SH_DOG_ID;

	ALTER TABLE DOGS DROP CONSTRAINT PK_DOGS;

	SELECT USER_IND_COLUMNS.INDEX_NAME, USER_IND_COLUMNS.TABLE_NAME, USER_IND_COLUMNS.COLUMN_NAME
	FROM USER_IND_COLUMNS, USER_INDEXES
	WHERE USER_IND_COLUMNS.TABLE_NAME = 'DOGS' AND
		USER_IND_COLUMNS.INDEX_NAME = USER_INDEXES.INDEX_NAME AND
		USER_IND_COLUMNS.INDEX_NAME = 'PK_DOGS';

-- e)
    ANALYZE INDEX PK_STORES VALIDATE STRUCTURE;
	SELECT BTREE_SPACE, USED_SPACE FROM INDEX_STATS;

--########################################################################################
